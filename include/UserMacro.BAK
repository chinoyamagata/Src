/*
 *******************************************************************************
 *	File name	:	UserMacro.h
 *
 *	[内容]
 *		ユーザー作成マクロ定義
 *------------------------------------------------------------------------------
 *	[変更日]		[変更者]		[概要]
 *	2017.11.08		Softex N.I		新規作成
 *******************************************************************************
 */
#ifndef	INCLUDED_USERMACRO_H
#define	INCLUDED_USERMACRO_H

#include <limits.h>
#include <float.h>

/* MISRA_NOCHECK 19.7 */
/*
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 *	<逸脱内容>
 *	ルール19.7：
 *		関数形式マクロよりも関数を用いるべきである。
 *	<逸脱の必要性>
 *		可読性向上の為
 *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 */

/*
 *==============================================================================
 *	数値限界定義(limits.h・float.h相当)
 *		各データ型定義における、数量的限界(最小値・最大値)のマクロ定義
 *		主に、上下限値リミッタ処理マクロ(M_LIMITUPP/M_LIMITLOW)で使用する。
 *	<注記>
 *		char型,float型は処理系依存となる為、
 *		limits.h、float.hの定義をそのまま使用します。
 *==============================================================================
 */
/*	char_t型 */
#define	M_CHAR_MIN			CHAR_MIN											/* CHAR_MIN */
#define	M_CHAR_MAX			CHAR_MAX											/* CHAR_MAX */

/* sint8_t 型 */
#define	M_SINT8_MIN			(-128)												/* SCHAR_MIN */
#define	M_SINT8_MAX			(127)												/* SCHAR_MAX */

/* uint8_t 型 */
#define	M_UINT8_MIN			(0U)												/* 0 */
#define	M_UINT8_MAX			(255U)												/* UCHAR_MAX */

/* sint16_t 型 */
#define	M_SINT16_MIN		(-32768)											/* SHRT_MIN */
#define	M_SINT16_MAX		(32767)												/* SHRT_MAX */

/* uint16_t 型 */
#define	M_UINT16_MIN		(0U)												/* 0 */
#define	M_UINT16_MAX		(65535U)											/* USHRT_MAX */

/* sint32_t 型 */
#define	M_SINT32_MIN		(-2147483648)										/* LONG_MIN */
#define	M_SINT32_MAX		(2147483647UL)										/* LONG_MAX */

/* uint32_t 型 */
#define	M_UINT32_MIN		(0U)												/* 0 */
#define	M_UINT32_MAX		(4294967295UL)										/* ULONG_MAX */

/* float_t型 */
#define	M_FLT_MAX_Minus		(-FLT_MAX)											/* 負の最大値(-3.40282347E+038) */
#define	M_FLT_MIN_Minus		(-FLT_MIN)											/* 負の最小値(-1.17549435E-038) */
#define	M_FLT_MIN			(FLT_MIN)											/* 正の最小値(1.17549435E-038) */
#define	M_FLT_MAX			(FLT_MAX)											/* 正の最大値(3.40282347E+038) */

/*
 *==============================================================================
 *	Bit位置定義
 *==============================================================================
 */
#define	M_BIT0				(0x00000001U)										/* 0000 0000 0000 0000 0000 0000 0000 0001 */
#define	M_BIT1				(0x00000002U)										/* 0000 0000 0000 0000 0000 0000 0000 0010 */
#define	M_BIT2				(0x00000004U)										/* 0000 0000 0000 0000 0000 0000 0000 0100 */
#define	M_BIT3				(0x00000008U)										/* 0000 0000 0000 0000 0000 0000 0000 1000 */
#define	M_BIT4				(0x00000010U)										/* 0000 0000 0000 0000 0000 0000 0001 0000 */
#define	M_BIT5				(0x00000020U)										/* 0000 0000 0000 0000 0000 0000 0010 0000 */
#define	M_BIT6				(0x00000040U)										/* 0000 0000 0000 0000 0000 0000 0100 0000 */
#define	M_BIT7				(0x00000080U)										/* 0000 0000 0000 0000 0000 0000 1000 0000 */
#define	M_BIT8				(0x00000100U)										/* 0000 0000 0000 0000 0000 0001 0000 0000 */
#define	M_BIT9				(0x00000200U)										/* 0000 0000 0000 0000 0000 0010 0000 0000 */
#define	M_BIT10				(0x00000400U)										/* 0000 0000 0000 0000 0000 0100 0000 0000 */
#define	M_BIT11				(0x00000800U)										/* 0000 0000 0000 0000 0000 1000 0000 0000 */
#define	M_BIT12				(0x00001000U)										/* 0000 0000 0000 0000 0001 0000 0000 0000 */
#define	M_BIT13				(0x00002000U)										/* 0000 0000 0000 0000 0010 0000 0000 0000 */
#define	M_BIT14				(0x00004000U)										/* 0000 0000 0000 0000 0100 0000 0000 0000 */
#define	M_BIT15				(0x00008000U)										/* 0000 0000 0000 0000 1000 0000 0000 0000 */
#define	M_BIT16				(0x00010000UL)										/* 0000 0000 0000 0001 0000 0000 0000 0000 */
#define	M_BIT17				(0x00020000UL)										/* 0000 0000 0000 0010 0000 0000 0000 0000 */
#define	M_BIT18				(0x00040000UL)										/* 0000 0000 0000 0100 0000 0000 0000 0000 */
#define	M_BIT19				(0x00080000UL)										/* 0000 0000 0000 1000 0000 0000 0000 0000 */
#define	M_BIT20				(0x00100000UL)										/* 0000 0000 0001 0000 0000 0000 0000 0000 */
#define	M_BIT21				(0x00200000UL)										/* 0000 0000 0010 0000 0000 0000 0000 0000 */
#define	M_BIT22				(0x00400000UL)										/* 0000 0000 0100 0000 0000 0000 0000 0000 */
#define	M_BIT23				(0x00800000UL)										/* 0000 0000 1000 0000 0000 0000 0000 0000 */
#define	M_BIT24				(0x01000000UL)										/* 0000 0001 0000 0000 0000 0000 0000 0000 */
#define	M_BIT25				(0x02000000UL)										/* 0000 0010 0000 0000 0000 0000 0000 0000 */
#define	M_BIT26				(0x04000000UL)										/* 0000 0100 0000 0000 0000 0000 0000 0000 */
#define	M_BIT27				(0x08000000UL)										/* 0000 1000 0000 0000 0000 0000 0000 0000 */
#define	M_BIT28				(0x10000000UL)										/* 0001 0000 0000 0000 0000 0000 0000 0000 */
#define	M_BIT29				(0x20000000UL)										/* 0010 0000 0000 0000 0000 0000 0000 0000 */
#define	M_BIT30				(0x40000000UL)										/* 0100 0000 0000 0000 0000 0000 0000 0000 */
#define	M_BIT31				(0x80000000UL)										/* 1000 0000 0000 0000 0000 0000 0000 0000 */

/*
 *==============================================================================
 *	NULL
 *		NULLの定義
 *==============================================================================
 */
#define	M_NULL					(0)												/* NULL */

/*
 *==============================================================================
 *	真/偽
 *		真(True),偽(False)の定義
 *==============================================================================
 */
#define	M_TRUE					(1 == 1)										/* 真 */
#define	M_FALSE					(1 == 0)										/* 偽 */

/*
 *==============================================================================
 *	ビット操作
 *		指定ビットのセット(=1)、クリア(=0)及び、テスト(真/偽)を行う。
 *		"bit"には、1ビットのみ指定すること。
 *		※"M_TSTBIT"が使用できなくなります。
 *==============================================================================
 */
#define	M_SETBIT( label, bit )	( (label) |= (bit) )							/* 指定ﾋﾞｯﾄ = 1 */
#define	M_CLRBIT( label, bit )	( (label) &= (~(bit)) )							/* 指定ﾋﾞｯﾄ = 0 */
#define	M_TSTBIT( label, bit )	( ((label) & (bit)) == (bit) )					/* 指定ﾋﾞｯﾄのﾃｽﾄ */

/*
 *==============================================================================
 *	フラグ操作
 *		フラグのセット(=1)、クリア(=0)及び、テスト(真/偽)を行う。
 *==============================================================================
 */
#define M_SETFLG( flag_name )	( (flag_name) = (1U) )							/* ﾌﾗｸﾞのｾｯﾄ */
#define M_CLRFLG( flag_name )	( (flag_name) = (0U) )							/* ﾌﾗｸﾞのｸﾘｱ */
#define M_TSTFLG( flag_name )	( (flag_name) != (0U) )							/* ﾌﾗｸﾞのﾃｽﾄ */

/*
 *==============================================================================
 *	上下限値リミッタ処理
 *		上限側：(label)の最大値を(upper)で指定した値に制限する。
 *		下限側：(label)の最小値を(lower)で指定した値に制限する。
 *==============================================================================
 */
#define	M_LIMITUPP( label, upper )	( ((label) > (upper)) ? (upper) : (label) )	/* 上限値ﾘﾐｯﾀ */
#define	M_LIMITLOW( label, lower )	( ((label) < (lower)) ? (lower) : (label) )	/* 下限値ﾘﾐｯﾀ */


/*
 *==============================================================================
 *	配列の要素数取得
 *	[注意]
 *		配列型以外（ポインタ定義）を渡しても、
 *		コンパイル時や実行時にエラーとなりません。
 *		ポインタを渡した場合には、期待通りの振る舞いをしない可能性がある為、
 *		arrayには、配列型のラベルを指定してください。
 *==============================================================================
 */
#define M_ArrayElement( array )	( sizeof(array) / sizeof((array)[0]) )			/* 配列の要素数取得 */

/*
 *==============================================================================
 *	ビットシフト処理
 *==============================================================================
 */
#define SHIFT_LEFT(x, n) ((x) << (n))
#define SHIFT_RIGHT(x, n) ((x) >> (n))



/* MISRA_CHECK */
#endif																			/* INCLUDED_USERMACRO_H */
